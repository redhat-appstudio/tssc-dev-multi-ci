#!/bin/bash

# Copy the jenkins file contents the shared library
# Can be used to update the release by setting
# JENKIN_SHARED_LIB_USER=redhat-appstudio
# JENKIN_SHARED_LIB_BRANCH=main
# For dev the  default is MY_GITHUB_USER and dev branch
# see ci-test for branch munging in scripts
# JENKIN_SHARED_LIB_USER=$MY_GITHUB_USER
# JENKIN_SHARED_LIB_BRANCH=dev

JENKIN_SHARED_LIB_USER=${JENKIN_SHARED_LIB_USER:-$MY_GITHUB_USER}
JENKIN_SHARED_LIB_BRANCH=${JENKIN_SHARED_LIB_BRANCH:-dev}

echo "Updating Jenkins shared lib for $JENKIN_SHARED_LIB_USER in branch $JENKIN_SHARED_LIB_BRANCH"

WORKDIR=$(mktemp -d)
JENKINS_SHARED_LIB=$WORKDIR/jenkins-library
REPO=https://github.com/$JENKIN_SHARED_LIB_USER/tssc-sample-jenkins

MULTI_CI=$(pwd)
GEN_SRC=$MULTI_CI/generated/source-repo
GEN_GITOPS=$MULTI_CI/generated/gitops-template

git clone --quiet $REPO $JENKINS_SHARED_LIB
cd $JENKINS_SHARED_LIB
if [ $(git rev-parse --verify $JENKIN_SHARED_LIB_BRANCH 2> /dev/null) ]; then
    echo "$JENKIN_SHARED_LIB_BRANCH exists"
    git checkout $JENKIN_SHARED_LIB_BRANCH
    git pull
else
    echo "$JENKIN_SHARED_LIB_BRANCH branch created"
    git checkout -b $JENKIN_SHARED_LIB_BRANCH
    git branch --set-upstream-to=origin/$JENKIN_SHARED_LIB_BRANCH
fi

# copy scripts and groovy files in to proper locations
# delete extra files - We should move these outside of ./tssc
# so we don't copy extra files by mistake
cp $MULTI_CI/rhtap/* $JENKINS_SHARED_LIB/resources
cp $MULTI_CI/rhtap.groovy $JENKINS_SHARED_LIB/vars
# skip the env.template.sh files, they are not for the library
# we should consider copying the Jenkins files for gitops and src into a jenkinsfile-samples
# so the latest Jenkinsfile is up to date in the library
rm -rf $JENKINS_SHARED_LIB/resources/env.template.sh
rm -rf $JENKINS_SHARED_LIB/resources/signing-secret-env.sh
git add .
git commit -m "Jenkins library update from tssc-dev-multi-ci"
git status
pwd
git pull
git push --set-upstream origin $JENKIN_SHARED_LIB_BRANCH
