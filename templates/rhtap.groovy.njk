{%- include "do-not-edit.njk" -%}
import groovy.json.*
import java.time.*
import java.time.format.*

def info(message) {
    echo "INFO: ${message}"
}

def install_script (scriptname) {
    echo ("Loading libraryResource(${scriptname})")
    contents = libraryResource( scriptname )
    writeFile(file:  "rhtap/${scriptname}"  , text: contents)
    sh "chmod +x rhtap/${scriptname}"
}

def run_script (scriptname) {
    // load common utilities across all tasks
    install_script ("common.sh")
    install_script ("verify-deps-exist")

    if (scriptname == 'buildah-rhtap.sh') {
      // Called from buildah-rhtap.sh
      install_script ('merge_sboms.py')
    }

    if (scriptname == 'cosign-sign-attest.sh') {
      // Called from cosign-sign-attest.sh
      install_script ('att-predicate-jenkins.sh')
    }

    if (scriptname == 'gather-images-to-upload-sbom.sh') {
      // Called from gather-images-to-upload-sbom.sh
      install_script ('gather-deploy-images.sh')
    }

    install_script (scriptname)
    sh "rhtap/${scriptname}"
}

{% for step in (build_steps | concat(gitops_steps)) -%}
{%- for substep in step.substeps -%}
def {{ substep | replace("-", "_") }}( ) {
    run_script ('{{ substep }}.sh')
}

{% endfor -%}
{%- endfor -%}

def env() {
    [
        pipeline_path: currentBuild.rawBuild.parent.definition.scriptPath,
        run_causes: JsonOutput.toJson(currentBuild.rawBuild.causes.collect { it.shortDescription }),
        start_time: DateTimeFormatter.ISO_INSTANT.format(Instant.ofEpochMilli(currentBuild.rawBuild.startTimeInMillis)),
    ]
}